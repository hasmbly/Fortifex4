// <auto-generated />
using System;
using Fortifex4.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Fortifex4.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(Fortifex4DBContext))]
    [Migration("20200804142241_Fortifex4DB_005")]
    partial class Fortifex4DB_005
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Fortifex4.Domain.Entities.Blockchain", b =>
                {
                    b.Property<int>("BlockchainID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("BlockchainID");

                    b.ToTable("Blockchains");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Contributor", b =>
                {
                    b.Property<int>("ContributorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("InvitationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InvitationStatus")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberUsername")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.HasKey("ContributorID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Contributors");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Country", b =>
                {
                    b.Property<string>("CountryCode")
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("CountryCode");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Currency", b =>
                {
                    b.Property<int>("CurrencyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockchainID")
                        .HasColumnType("int");

                    b.Property<int>("CoinMarketCapID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsForPreferredOption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFromCoinMarketCap")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShownInTradePair")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<float>("PercentChange1h")
                        .HasColumnType("real");

                    b.Property<float>("PercentChange24h")
                        .HasColumnType("real");

                    b.Property<float>("PercentChange7d")
                        .HasColumnType("real");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("UnitPriceInUSD")
                        .HasColumnType("decimal(29,18)");

                    b.Property<decimal>("Volume24h")
                        .HasColumnType("decimal(29,15)");

                    b.HasKey("CurrencyID");

                    b.HasIndex("BlockchainID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("GenderID");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.InternalTransfer", b =>
                {
                    b.Property<int>("InternalTransferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("ToTransactionID")
                        .HasColumnType("int");

                    b.HasKey("InternalTransferID");

                    b.HasIndex("FromTransactionID");

                    b.HasIndex("ToTransactionID");

                    b.ToTable("InternalTransfers");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Member", b =>
                {
                    b.Property<string>("MemberUsername")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActivationStatus")
                        .HasColumnType("int");

                    b.Property<string>("AuthenticationScheme")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ExternalID")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PictureURL")
                        .HasColumnType("varchar(2000)");

                    b.Property<int>("PreferredCoinCurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("PreferredFiatCurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("PreferredTimeFrameID")
                        .HasColumnType("int");

                    b.Property<int>("RegionID")
                        .HasColumnType("int");

                    b.HasKey("MemberUsername");

                    b.HasIndex("GenderID");

                    b.HasIndex("PreferredCoinCurrencyID");

                    b.HasIndex("PreferredFiatCurrencyID");

                    b.HasIndex("PreferredTimeFrameID");

                    b.HasIndex("RegionID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Owner", b =>
                {
                    b.Property<int>("OwnerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberUsername")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.HasKey("OwnerID");

                    b.HasIndex("MemberUsername");

                    b.HasIndex("ProviderID");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Pocket", b =>
                {
                    b.Property<int>("PocketID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyType")
                        .HasColumnType("int");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("WalletID")
                        .HasColumnType("int");

                    b.HasKey("PocketID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("WalletID");

                    b.ToTable("Pockets");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlockchainID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(500)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MemberUsername")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.HasKey("ProjectID");

                    b.HasIndex("BlockchainID");

                    b.HasIndex("MemberUsername");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.ProjectDocument", b =>
                {
                    b.Property<int>("ProjectDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DocumentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("ProjectDocumentID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectDocuments");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.ProjectStatusLog", b =>
                {
                    b.Property<int>("ProjectStatusLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("ProjectID")
                        .HasColumnType("int");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.HasKey("ProjectStatusLogID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectStatusLogs");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Provider", b =>
                {
                    b.Property<int>("ProviderID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.Property<string>("SiteURL")
                        .HasColumnType("varchar(2000)");

                    b.HasKey("ProviderID");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Region", b =>
                {
                    b.Property<int>("RegionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("RegionID");

                    b.HasIndex("CountryCode");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.TimeFrame", b =>
                {
                    b.Property<int>("TimeFrameID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.HasKey("TimeFrameID");

                    b.ToTable("TimeFrames");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Trade", b =>
                {
                    b.Property<int>("TradeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FromTransactionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsWithholding")
                        .HasColumnType("bit");

                    b.Property<int>("ToTransactionID")
                        .HasColumnType("int");

                    b.Property<int>("TradeType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(29,20)");

                    b.HasKey("TradeID");

                    b.HasIndex("FromTransactionID");

                    b.HasIndex("ToTransactionID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Transaction", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(29,10)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PairWalletAddress")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("PairWalletName")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("PocketID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("TransactionDateTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("TransactionHash")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPriceInUSD")
                        .HasColumnType("decimal(29,20)");

                    b.HasKey("TransactionID");

                    b.HasIndex("PocketID");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Wallet", b =>
                {
                    b.Property<int>("WalletID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("BlockchainID")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsSynchronized")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("OwnerID")
                        .HasColumnType("int");

                    b.Property<int>("ProviderType")
                        .HasColumnType("int");

                    b.HasKey("WalletID");

                    b.HasIndex("BlockchainID");

                    b.HasIndex("OwnerID");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Contributor", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Project", "Project")
                        .WithMany("Contributors")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Currency", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Blockchain", "Blockchain")
                        .WithMany("Currencies")
                        .HasForeignKey("BlockchainID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.InternalTransfer", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Transaction", "FromTransaction")
                        .WithMany("FromInternalTransfers")
                        .HasForeignKey("FromTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Transaction", "ToTransaction")
                        .WithMany("ToInternalTransfers")
                        .HasForeignKey("ToTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Member", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Gender", "Gender")
                        .WithMany("Members")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Currency", "PreferredCoinCurrency")
                        .WithMany()
                        .HasForeignKey("PreferredCoinCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Currency", "PreferredFiatCurrency")
                        .WithMany()
                        .HasForeignKey("PreferredFiatCurrencyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.TimeFrame", "PreferredTimeFrame")
                        .WithMany()
                        .HasForeignKey("PreferredTimeFrameID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Owner", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Member", "Member")
                        .WithMany("Owners")
                        .HasForeignKey("MemberUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Provider", "Provider")
                        .WithMany("Owners")
                        .HasForeignKey("ProviderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Pocket", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Currency", "Currency")
                        .WithMany("Pockets")
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Wallet", "Wallet")
                        .WithMany("Pockets")
                        .HasForeignKey("WalletID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Project", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Blockchain", "Blockchain")
                        .WithMany("Projects")
                        .HasForeignKey("BlockchainID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Member", "Member")
                        .WithMany("Projects")
                        .HasForeignKey("MemberUsername")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.ProjectDocument", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.ProjectStatusLog", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Project", "Project")
                        .WithMany("ProjectStatusLogs")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Region", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Country", "Country")
                        .WithMany("Regions")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Trade", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Transaction", "FromTransaction")
                        .WithMany("FromTrades")
                        .HasForeignKey("FromTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Transaction", "ToTransaction")
                        .WithMany("ToTrades")
                        .HasForeignKey("ToTransactionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Pocket", "Pocket")
                        .WithMany("Transactions")
                        .HasForeignKey("PocketID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Fortifex4.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("Fortifex4.Domain.Entities.Blockchain", "Blockchain")
                        .WithMany("Wallets")
                        .HasForeignKey("BlockchainID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Fortifex4.Domain.Entities.Owner", "Owner")
                        .WithMany("Wallets")
                        .HasForeignKey("OwnerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
